// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tksmith/minting.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Minting struct {
	Index     string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Timestamp int32  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount    int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Creator   string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Minting) Reset()         { *m = Minting{} }
func (m *Minting) String() string { return proto.CompactTextString(m) }
func (*Minting) ProtoMessage()    {}
func (*Minting) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f34f4a63499acf2, []int{0}
}
func (m *Minting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minting.Merge(m, src)
}
func (m *Minting) XXX_Size() int {
	return m.Size()
}
func (m *Minting) XXX_DiscardUnknown() {
	xxx_messageInfo_Minting.DiscardUnknown(m)
}

var xxx_messageInfo_Minting proto.InternalMessageInfo

func (m *Minting) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Minting) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Minting) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Minting) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Minting)(nil), "supsidacdisaac.ds.tksmith.Minting")
}

func init() { proto.RegisterFile("tksmith/minting.proto", fileDescriptor_5f34f4a63499acf2) }

var fileDescriptor_5f34f4a63499acf2 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0xa0, 0xad, 0xea, 0xd1, 0x02, 0x64, 0x24, 0x64, 0x55, 0x4c, 0x5d, 0x12, 0x0f,
	0xec, 0x0c, 0xec, 0x2c, 0x9d, 0x10, 0x9b, 0x6b, 0x5b, 0xed, 0x09, 0x39, 0x67, 0xe5, 0x2e, 0x52,
	0x79, 0x0b, 0x1e, 0x8b, 0xb1, 0x23, 0x23, 0x4a, 0x5e, 0x04, 0xe1, 0x36, 0x62, 0xfc, 0xee, 0x7e,
	0xfd, 0xfa, 0x7e, 0x79, 0xc3, 0xef, 0x94, 0x80, 0xf7, 0x36, 0x41, 0xcb, 0xd0, 0xee, 0x9a, 0xdc,
	0x21, 0xa3, 0xba, 0xa3, 0x3e, 0x13, 0x04, 0xe7, 0x03, 0x90, 0x73, 0xbe, 0x09, 0xd4, 0x9c, 0x83,
	0x0f, 0x28, 0x17, 0x2f, 0xa7, 0xac, 0xba, 0x96, 0x33, 0x68, 0x43, 0x3c, 0x68, 0xb1, 0x12, 0xeb,
	0xe5, 0xe6, 0x04, 0xea, 0x5e, 0x2e, 0x19, 0x52, 0x24, 0x76, 0x29, 0xeb, 0x8b, 0x95, 0x58, 0xcf,
	0x36, 0xff, 0x07, 0x75, 0x2b, 0xe7, 0x2e, 0x61, 0xdf, 0xb2, 0xbe, 0x2c, 0xaf, 0x33, 0x29, 0x2d,
	0x17, 0xbe, 0x8b, 0x8e, 0xb1, 0xd3, 0x57, 0xa5, 0x6d, 0xc2, 0xe7, 0xd7, 0xaf, 0xc1, 0x88, 0xe3,
	0x60, 0xc4, 0xcf, 0x60, 0xc4, 0xe7, 0x68, 0xaa, 0xe3, 0x68, 0xaa, 0xef, 0xd1, 0x54, 0x6f, 0x4f,
	0x3b, 0xe0, 0x7d, 0xbf, 0x6d, 0x3c, 0x26, 0x5b, 0x84, 0xeb, 0x3f, 0xe3, 0xba, 0x28, 0x5b, 0x8f,
	0x94, 0x90, 0xea, 0x40, 0xdc, 0xc5, 0x9c, 0x9d, 0x0d, 0x64, 0x0f, 0x76, 0x5a, 0xcb, 0x1f, 0x39,
	0xd2, 0x76, 0x5e, 0xc6, 0x3e, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x22, 0x00, 0x2f, 0x05,
	0x01, 0x00, 0x00,
}

func (m *Minting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMinting(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintMinting(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != 0 {
		i = encodeVarintMinting(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintMinting(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMinting(dAtA []byte, offset int, v uint64) int {
	offset -= sovMinting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Minting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovMinting(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMinting(uint64(m.Timestamp))
	}
	if m.Amount != 0 {
		n += 1 + sovMinting(uint64(m.Amount))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMinting(uint64(l))
	}
	return n
}

func sovMinting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMinting(x uint64) (n int) {
	return sovMinting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Minting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMinting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMinting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMinting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMinting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMinting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMinting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMinting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMinting = fmt.Errorf("proto: unexpected end of group")
)
