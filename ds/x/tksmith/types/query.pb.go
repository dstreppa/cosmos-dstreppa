// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tksmith/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetMintingRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetMintingRequest) Reset()         { *m = QueryGetMintingRequest{} }
func (m *QueryGetMintingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMintingRequest) ProtoMessage()    {}
func (*QueryGetMintingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9787cb227a962871, []int{0}
}
func (m *QueryGetMintingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMintingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMintingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMintingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMintingRequest.Merge(m, src)
}
func (m *QueryGetMintingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMintingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMintingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMintingRequest proto.InternalMessageInfo

func (m *QueryGetMintingRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetMintingResponse struct {
	Minting Minting `protobuf:"bytes,1,opt,name=minting,proto3" json:"minting"`
}

func (m *QueryGetMintingResponse) Reset()         { *m = QueryGetMintingResponse{} }
func (m *QueryGetMintingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMintingResponse) ProtoMessage()    {}
func (*QueryGetMintingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9787cb227a962871, []int{1}
}
func (m *QueryGetMintingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMintingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMintingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMintingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMintingResponse.Merge(m, src)
}
func (m *QueryGetMintingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMintingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMintingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMintingResponse proto.InternalMessageInfo

func (m *QueryGetMintingResponse) GetMinting() Minting {
	if m != nil {
		return m.Minting
	}
	return Minting{}
}

type QueryAllMintingRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMintingRequest) Reset()         { *m = QueryAllMintingRequest{} }
func (m *QueryAllMintingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMintingRequest) ProtoMessage()    {}
func (*QueryAllMintingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9787cb227a962871, []int{2}
}
func (m *QueryAllMintingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMintingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMintingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMintingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMintingRequest.Merge(m, src)
}
func (m *QueryAllMintingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMintingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMintingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMintingRequest proto.InternalMessageInfo

func (m *QueryAllMintingRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMintingResponse struct {
	Minting    []Minting           `protobuf:"bytes,1,rep,name=minting,proto3" json:"minting"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMintingResponse) Reset()         { *m = QueryAllMintingResponse{} }
func (m *QueryAllMintingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMintingResponse) ProtoMessage()    {}
func (*QueryAllMintingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9787cb227a962871, []int{3}
}
func (m *QueryAllMintingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMintingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMintingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMintingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMintingResponse.Merge(m, src)
}
func (m *QueryAllMintingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMintingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMintingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMintingResponse proto.InternalMessageInfo

func (m *QueryAllMintingResponse) GetMinting() []Minting {
	if m != nil {
		return m.Minting
	}
	return nil
}

func (m *QueryAllMintingResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBurningRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetBurningRequest) Reset()         { *m = QueryGetBurningRequest{} }
func (m *QueryGetBurningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBurningRequest) ProtoMessage()    {}
func (*QueryGetBurningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9787cb227a962871, []int{4}
}
func (m *QueryGetBurningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBurningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBurningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBurningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBurningRequest.Merge(m, src)
}
func (m *QueryGetBurningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBurningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBurningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBurningRequest proto.InternalMessageInfo

func (m *QueryGetBurningRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetBurningResponse struct {
	Burning Burning `protobuf:"bytes,1,opt,name=burning,proto3" json:"burning"`
}

func (m *QueryGetBurningResponse) Reset()         { *m = QueryGetBurningResponse{} }
func (m *QueryGetBurningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBurningResponse) ProtoMessage()    {}
func (*QueryGetBurningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9787cb227a962871, []int{5}
}
func (m *QueryGetBurningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBurningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBurningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBurningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBurningResponse.Merge(m, src)
}
func (m *QueryGetBurningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBurningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBurningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBurningResponse proto.InternalMessageInfo

func (m *QueryGetBurningResponse) GetBurning() Burning {
	if m != nil {
		return m.Burning
	}
	return Burning{}
}

type QueryAllBurningRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBurningRequest) Reset()         { *m = QueryAllBurningRequest{} }
func (m *QueryAllBurningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBurningRequest) ProtoMessage()    {}
func (*QueryAllBurningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9787cb227a962871, []int{6}
}
func (m *QueryAllBurningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBurningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBurningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBurningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBurningRequest.Merge(m, src)
}
func (m *QueryAllBurningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBurningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBurningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBurningRequest proto.InternalMessageInfo

func (m *QueryAllBurningRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBurningResponse struct {
	Burning    []Burning           `protobuf:"bytes,1,rep,name=burning,proto3" json:"burning"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBurningResponse) Reset()         { *m = QueryAllBurningResponse{} }
func (m *QueryAllBurningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBurningResponse) ProtoMessage()    {}
func (*QueryAllBurningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9787cb227a962871, []int{7}
}
func (m *QueryAllBurningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBurningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBurningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBurningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBurningResponse.Merge(m, src)
}
func (m *QueryAllBurningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBurningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBurningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBurningResponse proto.InternalMessageInfo

func (m *QueryAllBurningResponse) GetBurning() []Burning {
	if m != nil {
		return m.Burning
	}
	return nil
}

func (m *QueryAllBurningResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetMintingRequest)(nil), "supsidacdisaac.ds.tksmith.QueryGetMintingRequest")
	proto.RegisterType((*QueryGetMintingResponse)(nil), "supsidacdisaac.ds.tksmith.QueryGetMintingResponse")
	proto.RegisterType((*QueryAllMintingRequest)(nil), "supsidacdisaac.ds.tksmith.QueryAllMintingRequest")
	proto.RegisterType((*QueryAllMintingResponse)(nil), "supsidacdisaac.ds.tksmith.QueryAllMintingResponse")
	proto.RegisterType((*QueryGetBurningRequest)(nil), "supsidacdisaac.ds.tksmith.QueryGetBurningRequest")
	proto.RegisterType((*QueryGetBurningResponse)(nil), "supsidacdisaac.ds.tksmith.QueryGetBurningResponse")
	proto.RegisterType((*QueryAllBurningRequest)(nil), "supsidacdisaac.ds.tksmith.QueryAllBurningRequest")
	proto.RegisterType((*QueryAllBurningResponse)(nil), "supsidacdisaac.ds.tksmith.QueryAllBurningResponse")
}

func init() { proto.RegisterFile("tksmith/query.proto", fileDescriptor_9787cb227a962871) }

var fileDescriptor_9787cb227a962871 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xb3, 0x2d, 0xa1, 0xc2, 0xdc, 0x4c, 0xf9, 0x17, 0xa1, 0x05, 0xad, 0x50, 0x41, 0xa8,
	0xb1, 0x95, 0xc0, 0x19, 0xa9, 0x39, 0xd0, 0x13, 0x12, 0xe4, 0x84, 0x90, 0x90, 0xf0, 0x66, 0xad,
	0xad, 0xc5, 0xc6, 0xde, 0xc6, 0x5e, 0xd4, 0x0a, 0x71, 0xe1, 0x09, 0x90, 0x78, 0x82, 0x5e, 0xfa,
	0x2c, 0x3d, 0x56, 0xe2, 0xc2, 0x09, 0xa1, 0x84, 0x07, 0x41, 0x6b, 0x4f, 0x9a, 0x64, 0xb7, 0x34,
	0x6e, 0x04, 0x37, 0xc7, 0x9a, 0x6f, 0xfc, 0x9b, 0x6f, 0x66, 0xb2, 0xe8, 0x86, 0xf9, 0xa0, 0x87,
	0xc2, 0xec, 0xd1, 0xfd, 0x82, 0x8f, 0x0e, 0x49, 0x3e, 0x52, 0x46, 0xe1, 0xbb, 0xba, 0xc8, 0xb5,
	0x48, 0xd8, 0x20, 0x11, 0x9a, 0xb1, 0x01, 0x49, 0x34, 0x81, 0xb0, 0xd6, 0xbd, 0x54, 0xa9, 0x34,
	0xe3, 0x94, 0xe5, 0x82, 0x32, 0x29, 0x95, 0x61, 0x46, 0x28, 0xa9, 0x9d, 0xb0, 0xf5, 0x64, 0xa0,
	0xf4, 0x50, 0x69, 0x1a, 0x33, 0xcd, 0x5d, 0x46, 0xfa, 0xb1, 0x13, 0x73, 0xc3, 0x3a, 0x34, 0x67,
	0xa9, 0x90, 0x36, 0x18, 0x62, 0x6f, 0x4e, 0x5f, 0x1e, 0x0a, 0x69, 0x84, 0x4c, 0xab, 0xd7, 0x71,
	0x31, 0x92, 0xb3, 0xeb, 0xcd, 0x54, 0xa5, 0xca, 0x1e, 0x69, 0x79, 0x72, 0xb7, 0x11, 0x41, 0xb7,
	0x5e, 0x97, 0xaf, 0xec, 0x72, 0xf3, 0xd2, 0x65, 0xe9, 0xf3, 0xfd, 0x82, 0x6b, 0x83, 0x37, 0x51,
	0x53, 0xc8, 0x84, 0x1f, 0xdc, 0x09, 0x1e, 0x04, 0x8f, 0xaf, 0xf5, 0xdd, 0x8f, 0xe8, 0x1d, 0xba,
	0x5d, 0x8b, 0xd7, 0xb9, 0x92, 0x9a, 0xe3, 0x1e, 0xda, 0x00, 0x10, 0x2b, 0xb9, 0xde, 0x8d, 0xc8,
	0x5f, 0x5d, 0x20, 0x20, 0xee, 0x5d, 0x39, 0xf9, 0x79, 0xbf, 0xd1, 0x9f, 0x0a, 0xa3, 0xf7, 0x80,
	0xb3, 0x93, 0x65, 0x15, 0x9c, 0x17, 0x08, 0xcd, 0x0c, 0x80, 0x07, 0xb6, 0x88, 0x73, 0x8b, 0x94,
	0x6e, 0x11, 0xe7, 0x3f, 0xb8, 0x45, 0x5e, 0xb1, 0x94, 0x83, 0xb6, 0x3f, 0xa7, 0x8c, 0x8e, 0x03,
	0xa8, 0x60, 0xfe, 0x89, 0xf3, 0x2a, 0x58, 0x5f, 0xa9, 0x02, 0xbc, 0xbb, 0xc0, 0xb9, 0x66, 0x39,
	0x1f, 0x2d, 0xe5, 0x74, 0x00, 0x0b, 0xa0, 0x73, 0x9d, 0xe9, 0xb9, 0x46, 0x7a, 0x77, 0xe6, 0x2c,
	0x7e, 0x56, 0x17, 0xcc, 0x82, 0x47, 0x67, 0x40, 0x3c, 0xad, 0x0b, 0x84, 0xf3, 0x9d, 0xa9, 0xe0,
	0xfc, 0x8f, 0xce, 0x5c, 0x58, 0xc1, 0xfa, 0x4a, 0x15, 0xfc, 0xb3, 0xce, 0x74, 0x8f, 0x9a, 0xa8,
	0x69, 0x41, 0xf1, 0x71, 0x80, 0x36, 0x60, 0x0e, 0x70, 0xe7, 0x02, 0xa2, 0xf3, 0x57, 0xac, 0xd5,
	0xbd, 0x8c, 0xc4, 0x81, 0x44, 0xcf, 0xbe, 0x7c, 0xff, 0xfd, 0x6d, 0x8d, 0xe0, 0x6d, 0x6a, 0xb5,
	0xed, 0x52, 0xdc, 0xb6, 0x6a, 0x9a, 0x68, 0x5a, 0xf9, 0x47, 0xa0, 0x9f, 0xec, 0x6c, 0x7c, 0xc6,
	0x47, 0x01, 0x42, 0x90, 0x69, 0x27, 0xcb, 0x96, 0xb3, 0xd6, 0xf6, 0x6f, 0x39, 0x6b, 0x7d, 0x9f,
	0xa2, 0x6d, 0xcb, 0xba, 0x85, 0x1f, 0xfa, 0xb0, 0x5a, 0x33, 0xa1, 0x75, 0x5e, 0x66, 0x2e, 0x8e,
	0xa1, 0x97, 0x99, 0x95, 0xb1, 0xf2, 0x34, 0x13, 0x06, 0x68, 0xc1, 0x4c, 0xc8, 0xe4, 0x6b, 0xe6,
	0x65, 0x59, 0xeb, 0x2b, 0xe0, 0x69, 0x26, 0xb0, 0xf6, 0xde, 0x9c, 0x8c, 0xc3, 0xe0, 0x74, 0x1c,
	0x06, 0xbf, 0xc6, 0x61, 0xf0, 0x75, 0x12, 0x36, 0x4e, 0x27, 0x61, 0xe3, 0xc7, 0x24, 0x6c, 0xbc,
	0x7d, 0x9e, 0x0a, 0xb3, 0x57, 0xc4, 0x64, 0xa0, 0x86, 0xf5, 0x4c, 0x6e, 0x1b, 0xda, 0x89, 0x36,
	0x23, 0x9e, 0xe7, 0xac, 0xcc, 0x7c, 0x70, 0x96, 0xdb, 0x1c, 0xe6, 0x5c, 0xc7, 0x57, 0xed, 0x87,
	0xe3, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x4a, 0xe7, 0x3a, 0xf8, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a minting by index.
	Minting(ctx context.Context, in *QueryGetMintingRequest, opts ...grpc.CallOption) (*QueryGetMintingResponse, error)
	// Queries a list of minting items.
	MintingAll(ctx context.Context, in *QueryAllMintingRequest, opts ...grpc.CallOption) (*QueryAllMintingResponse, error)
	// Queries a burning by index.
	Burning(ctx context.Context, in *QueryGetBurningRequest, opts ...grpc.CallOption) (*QueryGetBurningResponse, error)
	// Queries a list of burning items.
	BurningAll(ctx context.Context, in *QueryAllBurningRequest, opts ...grpc.CallOption) (*QueryAllBurningResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Minting(ctx context.Context, in *QueryGetMintingRequest, opts ...grpc.CallOption) (*QueryGetMintingResponse, error) {
	out := new(QueryGetMintingResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.ds.tksmith.Query/Minting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintingAll(ctx context.Context, in *QueryAllMintingRequest, opts ...grpc.CallOption) (*QueryAllMintingResponse, error) {
	out := new(QueryAllMintingResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.ds.tksmith.Query/MintingAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Burning(ctx context.Context, in *QueryGetBurningRequest, opts ...grpc.CallOption) (*QueryGetBurningResponse, error) {
	out := new(QueryGetBurningResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.ds.tksmith.Query/Burning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BurningAll(ctx context.Context, in *QueryAllBurningRequest, opts ...grpc.CallOption) (*QueryAllBurningResponse, error) {
	out := new(QueryAllBurningResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.ds.tksmith.Query/BurningAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a minting by index.
	Minting(context.Context, *QueryGetMintingRequest) (*QueryGetMintingResponse, error)
	// Queries a list of minting items.
	MintingAll(context.Context, *QueryAllMintingRequest) (*QueryAllMintingResponse, error)
	// Queries a burning by index.
	Burning(context.Context, *QueryGetBurningRequest) (*QueryGetBurningResponse, error)
	// Queries a list of burning items.
	BurningAll(context.Context, *QueryAllBurningRequest) (*QueryAllBurningResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Minting(ctx context.Context, req *QueryGetMintingRequest) (*QueryGetMintingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Minting not implemented")
}
func (*UnimplementedQueryServer) MintingAll(ctx context.Context, req *QueryAllMintingRequest) (*QueryAllMintingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintingAll not implemented")
}
func (*UnimplementedQueryServer) Burning(ctx context.Context, req *QueryGetBurningRequest) (*QueryGetBurningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burning not implemented")
}
func (*UnimplementedQueryServer) BurningAll(ctx context.Context, req *QueryAllBurningRequest) (*QueryAllBurningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurningAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Minting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMintingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Minting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.ds.tksmith.Query/Minting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Minting(ctx, req.(*QueryGetMintingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMintingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintingAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.ds.tksmith.Query/MintingAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintingAll(ctx, req.(*QueryAllMintingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Burning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBurningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Burning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.ds.tksmith.Query/Burning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Burning(ctx, req.(*QueryGetBurningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BurningAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBurningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BurningAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.ds.tksmith.Query/BurningAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BurningAll(ctx, req.(*QueryAllBurningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supsidacdisaac.ds.tksmith.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Minting",
			Handler:    _Query_Minting_Handler,
		},
		{
			MethodName: "MintingAll",
			Handler:    _Query_MintingAll_Handler,
		},
		{
			MethodName: "Burning",
			Handler:    _Query_Burning_Handler,
		},
		{
			MethodName: "BurningAll",
			Handler:    _Query_BurningAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tksmith/query.proto",
}

func (m *QueryGetMintingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMintingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMintingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMintingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMintingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMintingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Minting.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMintingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMintingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMintingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMintingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMintingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMintingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Minting) > 0 {
		for iNdEx := len(m.Minting) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Minting[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBurningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBurningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBurningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBurningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBurningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBurningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Burning.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBurningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBurningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBurningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBurningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBurningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBurningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Burning) > 0 {
		for iNdEx := len(m.Burning) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Burning[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetMintingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMintingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Minting.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMintingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMintingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Minting) > 0 {
		for _, e := range m.Minting {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBurningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBurningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Burning.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBurningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBurningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Burning) > 0 {
		for _, e := range m.Burning {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetMintingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMintingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMintingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMintingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMintingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMintingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Minting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMintingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMintingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMintingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMintingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMintingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMintingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minting = append(m.Minting, Minting{})
			if err := m.Minting[len(m.Minting)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBurningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBurningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBurningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBurningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBurningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBurningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Burning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBurningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBurningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBurningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBurningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBurningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBurningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Burning = append(m.Burning, Burning{})
			if err := m.Burning[len(m.Burning)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
